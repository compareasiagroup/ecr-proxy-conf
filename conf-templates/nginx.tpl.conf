user  nginx;
worker_processes  1;
daemon off;

events {
    worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  keepalive_timeout 65;
  sendfile on;

  proxy_cache_path {{ .Config.CachePath }} levels=1:2 keys_zone=cache:16m inactive=1y max_size={{ .Config.CacheMaxSize }} use_temp_path=off;
  resolver {{ .Config.Resolver }};

  # this is necessary for us to be able to disable request buffering in all cases
  proxy_http_version 1.1;

  #https://docs.docker.com/registry/recipes/nginx/#setting-things-up
  map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
  '' 'registry/2.0';
  }

  server {
    {{ if .Config.Ssl }}
    listen {{ .Config.ProxyPort }} ssl default_server;

    ssl_certificate_key {{ .Config.SslKey }};
    ssl_certificate     {{ .Config.SslCert }};

    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;

    add_header Strict-Transport-Security max-age=31536000;
    {{ else }}
    listen {{ .Config.ProxyPort }} default_server;
    {{ end }}

    # Cache
    add_header X-Cache-Status   $upstream_cache_status;
    proxy_temp_path /cache/temp 1 2;
    proxy_ignore_headers        Cache-Control;

    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;

    # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)
    chunked_transfer_encoding on;

    # increases timeouts to avoid HTTP 504
    proxy_connect_timeout  3s;
    proxy_read_timeout     300s;
    proxy_send_timeout     300s;
    send_timeout           300s;

    # disable proxy request buffering
    proxy_request_buffering off;

    add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;
    add_header "Access-Control-Allow-Origin" "*";

    location / {
      set $url        https://{{ .Upstream }};
      proxy_pass      $url;
      {{ if .Config.Ssl }}
      proxy_redirect  $url https://$host:{{ .Config.ProxyPort }};
      {{ else }}
      proxy_redirect  $url http://$host:{{ .Config.ProxyPort }};
      {{ end}}

      # Add AWS ECR authentication headers
      proxy_set_header  X-Real-IP          $remote_addr;
      proxy_set_header  X-Forwarded-For    $remote_addr;
      proxy_set_header  X-Forwarded-User   "Basic {{ .BasicAuth }}";
      proxy_set_header  Authorization      "Basic {{ .BasicAuth }}";
      proxy_set_header  X-Forwarded-Proto  $scheme;

    }

    # Content addressable files like blobs.
    # https://docs.docker.com/registry/spec/api/#blob
    location ~ ^/v2/.*/blobs/[a-z0-9]+:[a-f0-9]+$ {
      set $url        https://{{ .Upstream }};
      proxy_pass      $url;
      {{ if .Config.Ssl }}
      proxy_redirect  $url https://$host:{{ .Config.ProxyPort }};
      {{ else }}
      proxy_redirect  $url http://$host:{{ .Config.ProxyPort }};
      {{ end}}

      # Add AWS ECR authentication headers
      proxy_set_header  X-Real-IP          $remote_addr;
      proxy_set_header  X-Forwarded-For    $remote_addr;
      proxy_set_header  X-Forwarded-User   "Basic {{ .BasicAuth }}";
      proxy_set_header  Authorization      "Basic {{ .BasicAuth }}";
      proxy_set_header  X-Forwarded-Proto  $scheme;

      # When accessing image blobs using HTTP GET AWS ECR redirects with
      # s3 buckets uri to download the image. This needs to handled by
      # nginx rather then docker client for caching.
      proxy_intercept_errors    on;
      error_page 301 302 307 =  @handle_redirect;
    }

    # No authentication headers needed as ECR returns s3 uri with details in
    # query params. Also the params should be part of cache key for nginx to
    # issue HIT for same image blob.
    location @handle_redirect {
      set                    $saved_redirect_location '$upstream_http_location';
      proxy_pass             $saved_redirect_location;
      proxy_cache            cache;
      proxy_cache_key        {{ .Config.CacheKey }};
      proxy_cache_valid      200  1y;
      proxy_cache_use_stale  error timeout invalid_header updating
                             http_500 http_502 http_503 http_504;
      proxy_cache_lock       on;
    }
  }
}
